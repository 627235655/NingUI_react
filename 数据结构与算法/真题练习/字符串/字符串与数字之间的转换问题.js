// 真题描述：请你来实现一个 atoi 函数，使其能将字符串转换成整数。
// 首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。
// 当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。
// 该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。
// 注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。
// 在任何情况下，若函数不能进行有效的转换时，请返回 0。

// 说明： 假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−2^31,  2^31 − 1]。如果数值超过这个范围，请返回  INT_MAX (2^31 − 1) 或 INT_MIN (−2^31) 。

// 示例 1:
// 输入: "42"
// 输出: 42

// 示例 2:
// 输入: " -42"
// 输出: -42
// 解释: 第一个非空白字符为 '-', 它是一个负号。
// 我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。

// 示例 3: 输入: "4193 with words"
// 输出: 4193
// 解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。

// 示例 4: 输入: "words and 987"
// 输出: 0
// 解释: 第一个非空字符是 'w', 但它不是数字或正、负号。 因此无法执行有效的转换。

// 示例 5:
// 输入: "-91283472332"
// 输出: -2147483648
// 解释: 数字 "-91283472332" 超过 32 位有符号整数范围。因此返回 INT_MIN (−2^31) 。

// 自我实现 - 不够清晰的正则
function str2num(str) {
	const INT_MAX = Math.pow(2, 31) - 1,
		INT_MIN = Math.pow(-2, 31);
	// 去除两端空格
	str = str.trim();
	let len = str.length;
	if (len === 0) {
		return 0;
	}
	const startReg = new RegExp('\\d|-'),
		numReg = new RegExp('\\d*');
	if (!startReg.test(str[0])) {
		console.log(str);
		return 0;
	} else {
		console.log(str);
		if (str[0] === '-') {
			let num = -Number(str.substr(1).match(numReg)[0]);
			console.log(num);
			return num < INT_MIN ? INT_MIN : num;
		} else {
			let num = Number(str.match(numReg)[0]);
			console.log(num);
			return num > INT_MAX ? INT_MAX : num;
		}
	}
}

// 正则实现
function str2num(str) {
	const INT_MAX = Math.pow(2, 31) - 1,
		INT_MIN = Math.pow(-2, 31),
		reg = /\s*([-\+]?[0-9]*).*/,
		// 正则解析
		// \s*  \s 意味着空字符，它可以用来匹配回车、空格、换行等空白区域
		// \s*  *  *这个符号，跟在其它符号后面，意味着“前面这个符号可以出现0次或多次
		// \s* 这里的意思就是空格出现0次或多次，都可被匹配到
		// () 捕获组 () 圈住的内容，就是我们要捕获起来额外存储的东西
		// [-\+] [] 中的匹配符之间是“或”的关系，也就是说只要能匹配上其中一个就行
		// [-\+] \+ + 本身在正则中是有含义的， 所以需要转义 (+ 匹配前面的子表达式一次或多次)
		// ? 匹配前面的子表达式零次或一次
		// [0-9]* [0-9] === \d 即匹配对应数字
		// .* 最后的 . 匹配除换行符 \n 之外的任何单字符，.*用于字符串尾部匹配非数字的任意字符
		// ).*  .*是被排除捕获组之外的，所以说这个东西其实也不会被额外存储，它被“摘除”了
		groups = str.match(reg);
	// match() 方法是一个在字符串中执行查找匹配的String方法，它返回一个数组，在未匹配到时会返回 null
	console.log(groups);
	if (groups) {
		let res = Number(groups[1]);
		console.log(res);
		if (isNaN(res)) {
			return 0;
		} else {
			return res > INT_MAX ? INT_MAX : res < INT_MIN ? INT_MIN : res;
		}
	}
}
